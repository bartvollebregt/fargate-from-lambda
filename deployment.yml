AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Lambda -> Fargate (github.com/jolexa/fargate-from-lambda)

Parameters:
  Bucket:
    Type: String
  md5:
    Type: String

Outputs:
  ECRRepo:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FargateECSRepo}

Resources:
  SpawnFargateFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Sid: 'Lambda'
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/cfn/"
      Policies:
      - PolicyName: ECS
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:RunTask
            Resource:
            - !Ref FargateECSTaskDefinition
      - PolicyName: IAM
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource:
            - !GetAtt FargateExecutionRole.Arn

  SpawnFargateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.handler
      Runtime: python3.6
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Sub ${md5}.zip
      Role: !GetAtt SpawnFargateFunctionRole.Arn
      Environment:
        Variables:
          ECSCluster: !GetAtt FargateECSCluster.Arn
          ECSTaskArn: !Ref FargateECSTaskDefinition
          ECSSubnet: !Ref FargateSubnet
          ECSSecGroup: !Ref FargateSG

  FargateECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: fargate-from-lambda

  FargateLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 1

  FargateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Sid: 'ECS'
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/cfn/"

  FargateECSRepo:
    Type: "AWS::ECR::Repository"

  FargateVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.10.10.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
  FargateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock : 10.10.10.0/24
      VpcId: !Ref FargateVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
  FargateIGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
  FargateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref FargateVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
  FargateRoute:
    Type: "AWS::EC2::Route"
    DependsOn: FargateIGW
    Properties:
      RouteTableId: !Ref FargateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref FargateIGW
  FargateAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref FargateVPC
      InternetGatewayId: !Ref FargateIGW
  FargateSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub Generated by ${AWS::StackName}
      SecurityGroupIngress:
      - IpProtocol: -1
        CidrIp: 127.0.0.1/32
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
      VpcId: !Ref FargateVPC


  FargateECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Cpu: 512
      Family: FargateExampleFamily
      Memory: 2GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !GetAtt FargateExecutionRole.Arn
      ContainerDefinitions:
        -
          Name: echo-10-docker
          Image: jolexa/echo-10
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FargateLogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: dockerregistry
        -
          Name: echo-10-ecr
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FargateECSRepo}:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FargateLogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecr

